// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module traitCoul_detectCoul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pixIn_val,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [95:0] pixIn_val;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
reg   [31:0] cptR;
reg   [31:0] cptG;
reg   [31:0] cptB;
reg   [31:0] cptPix;
wire   [31:0] select_ln77_fu_322_p3;
reg   [31:0] select_ln77_reg_822;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] select_ln77_1_fu_438_p3;
reg   [31:0] select_ln77_1_reg_832;
wire   [0:0] or_ln77_8_fu_482_p2;
reg   [0:0] or_ln77_8_reg_842;
wire   [0:0] icmp_ln120_fu_504_p2;
reg   [0:0] icmp_ln120_reg_847;
wire   [0:0] or_ln120_2_fu_544_p2;
reg   [0:0] or_ln120_2_reg_858;
wire   [31:0] select_ln120_fu_522_p3;
wire   [0:0] or_ln120_fu_516_p2;
wire    ap_block_pp0_stage0;
wire   [31:0] select_ln120_1_fu_536_p3;
wire   [0:0] or_ln120_1_fu_530_p2;
wire   [31:0] select_ln120_2_fu_797_p3;
wire   [31:0] select_ln120_3_fu_550_p3;
wire   [31:0] valR_fu_50_p1;
wire   [31:0] valG_fu_54_p4;
wire   [31:0] valB_fu_64_p4;
wire   [0:0] icmp_ln44_fu_74_p2;
wire   [0:0] icmp_ln44_1_fu_80_p2;
wire   [0:0] icmp_ln48_fu_106_p2;
wire   [0:0] icmp_ln48_1_fu_112_p2;
wire   [0:0] icmp_ln52_fu_130_p2;
wire   [0:0] icmp_ln52_1_fu_136_p2;
wire   [0:0] icmp_ln56_fu_148_p2;
wire   [0:0] icmp_ln63_fu_160_p2;
wire   [0:0] icmp_ln70_fu_172_p2;
wire   [0:0] and_ln70_fu_178_p2;
wire   [0:0] and_ln77_fu_184_p2;
wire   [0:0] xor_ln70_fu_190_p2;
wire   [0:0] and_ln63_fu_166_p2;
wire   [0:0] and_ln77_1_fu_196_p2;
wire   [0:0] or_ln77_fu_202_p2;
wire   [0:0] and_ln56_fu_154_p2;
wire   [0:0] and_ln48_fu_118_p2;
wire   [0:0] and_ln52_fu_142_p2;
wire   [0:0] or_ln52_fu_214_p2;
wire   [0:0] or_ln77_1_fu_208_p2;
wire   [0:0] xor_ln52_fu_220_p2;
wire   [0:0] and_ln44_fu_86_p2;
wire   [31:0] add_ln46_fu_100_p2;
wire   [0:0] or_ln48_fu_240_p2;
wire   [0:0] or_ln52_1_fu_246_p2;
wire   [0:0] xor_ln52_1_fu_252_p2;
wire   [0:0] and_ln56_1_fu_258_p2;
wire   [31:0] select_ln44_fu_232_p3;
wire   [0:0] or_ln56_fu_272_p2;
wire   [0:0] xor_ln56_fu_278_p2;
wire   [0:0] and_ln63_1_fu_284_p2;
wire   [31:0] select_ln56_fu_264_p3;
wire   [0:0] or_ln63_fu_298_p2;
wire   [0:0] or_ln70_fu_304_p2;
wire   [0:0] xor_ln70_1_fu_310_p2;
wire   [0:0] and_ln77_3_fu_316_p2;
wire   [31:0] select_ln63_fu_290_p3;
wire   [0:0] or_ln77_2_fu_330_p2;
wire   [0:0] xor_ln77_fu_336_p2;
wire   [0:0] or_ln77_3_fu_342_p2;
wire   [0:0] xor_ln56_1_fu_348_p2;
wire   [0:0] and_ln77_4_fu_354_p2;
wire   [0:0] or_ln77_4_fu_360_p2;
wire   [0:0] xor_ln48_fu_366_p2;
wire   [0:0] and_ln77_5_fu_372_p2;
wire   [0:0] or_ln77_5_fu_378_p2;
wire   [0:0] xor_ln44_fu_390_p2;
wire   [0:0] and_ln48_1_fu_396_p2;
wire   [31:0] add_ln50_fu_124_p2;
wire   [31:0] select_ln48_fu_402_p3;
wire   [0:0] xor_ln63_fu_418_p2;
wire   [0:0] and_ln70_1_fu_424_p2;
wire   [31:0] select_ln56_1_fu_410_p3;
wire   [31:0] select_ln70_fu_430_p3;
wire   [0:0] or_ln77_6_fu_446_p2;
wire   [0:0] xor_ln77_2_fu_452_p2;
wire   [0:0] and_ln52_1_fu_464_p2;
wire   [0:0] or_ln77_7_fu_458_p2;
wire   [0:0] xor_ln52_2_fu_470_p2;
wire   [0:0] and_ln77_6_fu_476_p2;
wire   [31:0] add_ln88_fu_498_p2;
wire   [0:0] and_ln77_2_fu_226_p2;
wire   [0:0] or_ln120_3_fu_510_p2;
wire   [0:0] xor_ln77_1_fu_384_p2;
wire   [0:0] xor_ln77_3_fu_488_p2;
wire   [31:0] add_ln70_fu_580_p2;
wire   [31:0] select_ln77_2_fu_586_p3;
wire   [0:0] icmp_ln90_fu_593_p2;
wire   [0:0] icmp_ln90_1_fu_597_p2;
wire   [0:0] icmp_ln94_fu_608_p2;
wire   [0:0] icmp_ln94_1_fu_612_p2;
wire   [0:0] icmp_ln98_fu_623_p2;
wire   [0:0] icmp_ln98_1_fu_628_p2;
wire   [0:0] icmp_ln102_fu_639_p2;
wire   [0:0] icmp_ln106_fu_649_p2;
wire   [0:0] xor_ln106_fu_654_p2;
wire   [0:0] icmp_ln110_fu_666_p2;
wire   [0:0] and_ln110_fu_671_p2;
wire   [0:0] and_ln90_fu_602_p2;
wire   [0:0] and_ln94_fu_617_p2;
wire   [0:0] xor_ln90_fu_681_p2;
wire   [0:0] or_ln94_fu_693_p2;
wire   [0:0] and_ln98_fu_633_p2;
wire   [0:0] xor_ln94_fu_699_p2;
wire   [0:0] and_ln98_1_fu_705_p2;
wire   [0:0] and_ln94_1_fu_687_p2;
wire   [0:0] or_ln98_fu_719_p2;
wire   [1:0] select_ln98_fu_711_p3;
wire   [0:0] and_ln102_fu_643_p2;
wire   [0:0] or_ln102_fu_733_p2;
wire   [0:0] or_ln102_1_fu_739_p2;
wire   [0:0] or_ln106_fu_660_p2;
wire   [0:0] xor_ln102_fu_745_p2;
wire   [0:0] and_ln106_fu_751_p2;
wire   [1:0] zext_ln90_fu_677_p1;
wire   [1:0] select_ln98_1_fu_725_p3;
wire   [1:0] select_ln106_fu_757_p3;
wire   [0:0] xor_ln106_1_fu_769_p2;
wire   [0:0] and_ln106_1_fu_775_p2;
wire   [0:0] or_ln106_1_fu_781_p2;
wire   [0:0] or_ln106_2_fu_787_p2;
wire   [7:0] zext_ln106_fu_765_p1;
wire   [7:0] zext_ln120_fu_793_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 cptR = 32'd0;
#0 cptG = 32'd0;
#0 cptB = 32'd0;
#0 cptPix = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln120_2_reg_858 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cptB <= select_ln120_2_fu_797_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln120_1_fu_530_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cptG <= select_ln120_1_fu_536_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cptPix <= select_ln120_3_fu_550_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln120_fu_516_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cptR <= select_ln120_fu_522_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln120_reg_847 <= icmp_ln120_fu_504_p2;
        or_ln120_2_reg_858 <= or_ln120_2_fu_544_p2;
        or_ln77_8_reg_842 <= or_ln77_8_fu_482_p2;
        select_ln77_1_reg_832 <= select_ln77_1_fu_438_p3;
        select_ln77_reg_822 <= select_ln77_fu_322_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_100_p2 = (cptR + 32'd1);

assign add_ln50_fu_124_p2 = (cptG + 32'd1);

assign add_ln70_fu_580_p2 = (cptB + 32'd1);

assign add_ln88_fu_498_p2 = (cptPix + 32'd1);

assign and_ln102_fu_643_p2 = (icmp_ln90_1_fu_597_p2 & icmp_ln102_fu_639_p2);

assign and_ln106_1_fu_775_p2 = (xor_ln106_1_fu_769_p2 & icmp_ln90_fu_593_p2);

assign and_ln106_fu_751_p2 = (xor_ln102_fu_745_p2 & or_ln106_fu_660_p2);

assign and_ln110_fu_671_p2 = (icmp_ln94_fu_608_p2 & icmp_ln110_fu_666_p2);

assign and_ln44_fu_86_p2 = (icmp_ln44_fu_74_p2 & icmp_ln44_1_fu_80_p2);

assign and_ln48_1_fu_396_p2 = (xor_ln44_fu_390_p2 & and_ln48_fu_118_p2);

assign and_ln48_fu_118_p2 = (icmp_ln48_fu_106_p2 & icmp_ln48_1_fu_112_p2);

assign and_ln52_1_fu_464_p2 = (icmp_ln52_fu_130_p2 & icmp_ln52_1_fu_136_p2);

assign and_ln52_fu_142_p2 = (icmp_ln52_fu_130_p2 & icmp_ln52_1_fu_136_p2);

assign and_ln56_1_fu_258_p2 = (xor_ln52_1_fu_252_p2 & and_ln56_fu_154_p2);

assign and_ln56_fu_154_p2 = (icmp_ln56_fu_148_p2 & icmp_ln44_1_fu_80_p2);

assign and_ln63_1_fu_284_p2 = (xor_ln56_fu_278_p2 & and_ln63_fu_166_p2);

assign and_ln63_fu_166_p2 = (icmp_ln63_fu_160_p2 & icmp_ln44_fu_74_p2);

assign and_ln70_1_fu_424_p2 = (xor_ln63_fu_418_p2 & and_ln70_fu_178_p2);

assign and_ln70_fu_178_p2 = (icmp_ln70_fu_172_p2 & icmp_ln48_fu_106_p2);

assign and_ln77_1_fu_196_p2 = (xor_ln70_fu_190_p2 & and_ln77_fu_184_p2);

assign and_ln77_2_fu_226_p2 = (xor_ln52_fu_220_p2 & or_ln77_1_fu_208_p2);

assign and_ln77_3_fu_316_p2 = (xor_ln70_1_fu_310_p2 & and_ln77_fu_184_p2);

assign and_ln77_4_fu_354_p2 = (xor_ln56_1_fu_348_p2 & or_ln77_3_fu_342_p2);

assign and_ln77_5_fu_372_p2 = (xor_ln48_fu_366_p2 & or_ln77_4_fu_360_p2);

assign and_ln77_6_fu_476_p2 = (xor_ln52_2_fu_470_p2 & or_ln77_7_fu_458_p2);

assign and_ln77_fu_184_p2 = (icmp_ln63_fu_160_p2 & icmp_ln56_fu_148_p2);

assign and_ln90_fu_602_p2 = (icmp_ln90_fu_593_p2 & icmp_ln90_1_fu_597_p2);

assign and_ln94_1_fu_687_p2 = (xor_ln90_fu_681_p2 & and_ln94_fu_617_p2);

assign and_ln94_fu_617_p2 = (icmp_ln94_fu_608_p2 & icmp_ln94_1_fu_612_p2);

assign and_ln98_1_fu_705_p2 = (xor_ln94_fu_699_p2 & and_ln98_fu_633_p2);

assign and_ln98_fu_633_p2 = (icmp_ln98_fu_623_p2 & icmp_ln98_1_fu_628_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = zext_ln106_fu_765_p1;

assign ap_return_1 = zext_ln120_fu_793_p1;

assign icmp_ln102_fu_639_p2 = ((select_ln77_reg_822 == select_ln77_1_reg_832) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_649_p2 = ((select_ln77_reg_822 != select_ln77_2_fu_586_p3) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_666_p2 = ((select_ln77_1_reg_832 == select_ln77_2_fu_586_p3) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_504_p2 = ((add_ln88_fu_498_p2 == 32'd107200) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_80_p2 = (($signed(valR_fu_50_p1) > $signed(valB_fu_64_p4)) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_74_p2 = (($signed(valR_fu_50_p1) > $signed(valG_fu_54_p4)) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_112_p2 = (($signed(valG_fu_54_p4) > $signed(valB_fu_64_p4)) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_106_p2 = (($signed(valG_fu_54_p4) > $signed(valR_fu_50_p1)) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_136_p2 = (($signed(valB_fu_64_p4) > $signed(valG_fu_54_p4)) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_130_p2 = (($signed(valB_fu_64_p4) > $signed(valR_fu_50_p1)) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_148_p2 = ((valR_fu_50_p1 == valG_fu_54_p4) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_160_p2 = ((valR_fu_50_p1 == valB_fu_64_p4) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_172_p2 = ((valG_fu_54_p4 == valB_fu_64_p4) ? 1'b1 : 1'b0);

assign icmp_ln90_1_fu_597_p2 = (($signed(select_ln77_reg_822) > $signed(select_ln77_2_fu_586_p3)) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_593_p2 = (($signed(select_ln77_reg_822) > $signed(select_ln77_1_reg_832)) ? 1'b1 : 1'b0);

assign icmp_ln94_1_fu_612_p2 = (($signed(select_ln77_1_reg_832) > $signed(select_ln77_2_fu_586_p3)) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_608_p2 = (($signed(select_ln77_1_reg_832) > $signed(select_ln77_reg_822)) ? 1'b1 : 1'b0);

assign icmp_ln98_1_fu_628_p2 = (($signed(select_ln77_2_fu_586_p3) > $signed(select_ln77_1_reg_832)) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_623_p2 = (($signed(select_ln77_2_fu_586_p3) > $signed(select_ln77_reg_822)) ? 1'b1 : 1'b0);

assign or_ln102_1_fu_739_p2 = (or_ln94_fu_693_p2 | or_ln102_fu_733_p2);

assign or_ln102_fu_733_p2 = (and_ln98_fu_633_p2 | and_ln102_fu_643_p2);

assign or_ln106_1_fu_781_p2 = (or_ln102_1_fu_739_p2 | and_ln106_1_fu_775_p2);

assign or_ln106_2_fu_787_p2 = (or_ln106_1_fu_781_p2 | and_ln110_fu_671_p2);

assign or_ln106_fu_660_p2 = (xor_ln106_fu_654_p2 | icmp_ln106_fu_649_p2);

assign or_ln120_1_fu_530_p2 = (xor_ln77_1_fu_384_p2 | icmp_ln120_fu_504_p2);

assign or_ln120_2_fu_544_p2 = (xor_ln77_3_fu_488_p2 | icmp_ln120_fu_504_p2);

assign or_ln120_3_fu_510_p2 = (icmp_ln120_fu_504_p2 | and_ln77_2_fu_226_p2);

assign or_ln120_fu_516_p2 = (or_ln120_3_fu_510_p2 | and_ln44_fu_86_p2);

assign or_ln48_fu_240_p2 = (and_ln48_fu_118_p2 | and_ln44_fu_86_p2);

assign or_ln52_1_fu_246_p2 = (or_ln48_fu_240_p2 | and_ln52_fu_142_p2);

assign or_ln52_fu_214_p2 = (and_ln52_fu_142_p2 | and_ln48_fu_118_p2);

assign or_ln56_fu_272_p2 = (or_ln52_1_fu_246_p2 | and_ln56_fu_154_p2);

assign or_ln63_fu_298_p2 = (or_ln56_fu_272_p2 | and_ln63_fu_166_p2);

assign or_ln70_fu_304_p2 = (or_ln63_fu_298_p2 | and_ln70_fu_178_p2);

assign or_ln77_1_fu_208_p2 = (or_ln77_fu_202_p2 | and_ln56_fu_154_p2);

assign or_ln77_2_fu_330_p2 = (and_ln77_fu_184_p2 | and_ln70_fu_178_p2);

assign or_ln77_3_fu_342_p2 = (xor_ln77_fu_336_p2 | and_ln63_fu_166_p2);

assign or_ln77_4_fu_360_p2 = (and_ln77_4_fu_354_p2 | and_ln52_fu_142_p2);

assign or_ln77_5_fu_378_p2 = (and_ln77_5_fu_372_p2 | and_ln44_fu_86_p2);

assign or_ln77_6_fu_446_p2 = (or_ln77_2_fu_330_p2 | and_ln63_fu_166_p2);

assign or_ln77_7_fu_458_p2 = (xor_ln77_2_fu_452_p2 | and_ln56_fu_154_p2);

assign or_ln77_8_fu_482_p2 = (or_ln48_fu_240_p2 | and_ln77_6_fu_476_p2);

assign or_ln77_fu_202_p2 = (and_ln77_1_fu_196_p2 | and_ln63_fu_166_p2);

assign or_ln94_fu_693_p2 = (and_ln94_fu_617_p2 | and_ln90_fu_602_p2);

assign or_ln98_fu_719_p2 = (and_ln98_1_fu_705_p2 | and_ln94_1_fu_687_p2);

assign select_ln106_fu_757_p3 = ((and_ln106_fu_751_p2[0:0] == 1'b1) ? zext_ln90_fu_677_p1 : select_ln98_1_fu_725_p3);

assign select_ln120_1_fu_536_p3 = ((icmp_ln120_fu_504_p2[0:0] == 1'b1) ? 32'd0 : select_ln77_1_fu_438_p3);

assign select_ln120_2_fu_797_p3 = ((icmp_ln120_reg_847[0:0] == 1'b1) ? 32'd0 : select_ln77_2_fu_586_p3);

assign select_ln120_3_fu_550_p3 = ((icmp_ln120_fu_504_p2[0:0] == 1'b1) ? 32'd0 : add_ln88_fu_498_p2);

assign select_ln120_fu_522_p3 = ((icmp_ln120_fu_504_p2[0:0] == 1'b1) ? 32'd0 : select_ln77_fu_322_p3);

assign select_ln44_fu_232_p3 = ((and_ln44_fu_86_p2[0:0] == 1'b1) ? add_ln46_fu_100_p2 : cptR);

assign select_ln48_fu_402_p3 = ((and_ln48_1_fu_396_p2[0:0] == 1'b1) ? add_ln50_fu_124_p2 : cptG);

assign select_ln56_1_fu_410_p3 = ((and_ln56_1_fu_258_p2[0:0] == 1'b1) ? add_ln50_fu_124_p2 : select_ln48_fu_402_p3);

assign select_ln56_fu_264_p3 = ((and_ln56_1_fu_258_p2[0:0] == 1'b1) ? add_ln46_fu_100_p2 : select_ln44_fu_232_p3);

assign select_ln63_fu_290_p3 = ((and_ln63_1_fu_284_p2[0:0] == 1'b1) ? add_ln46_fu_100_p2 : select_ln56_fu_264_p3);

assign select_ln70_fu_430_p3 = ((and_ln70_1_fu_424_p2[0:0] == 1'b1) ? add_ln50_fu_124_p2 : select_ln56_1_fu_410_p3);

assign select_ln77_1_fu_438_p3 = ((and_ln77_3_fu_316_p2[0:0] == 1'b1) ? add_ln50_fu_124_p2 : select_ln70_fu_430_p3);

assign select_ln77_2_fu_586_p3 = ((or_ln77_8_reg_842[0:0] == 1'b1) ? cptB : add_ln70_fu_580_p2);

assign select_ln77_fu_322_p3 = ((and_ln77_3_fu_316_p2[0:0] == 1'b1) ? add_ln46_fu_100_p2 : select_ln63_fu_290_p3);

assign select_ln98_1_fu_725_p3 = ((or_ln98_fu_719_p2[0:0] == 1'b1) ? select_ln98_fu_711_p3 : 2'd2);

assign select_ln98_fu_711_p3 = ((and_ln98_1_fu_705_p2[0:0] == 1'b1) ? 2'd0 : 2'd1);

assign valB_fu_64_p4 = {{pixIn_val[95:64]}};

assign valG_fu_54_p4 = {{pixIn_val[63:32]}};

assign valR_fu_50_p1 = pixIn_val[31:0];

assign xor_ln102_fu_745_p2 = (or_ln102_1_fu_739_p2 ^ 1'd1);

assign xor_ln106_1_fu_769_p2 = (icmp_ln106_fu_649_p2 ^ 1'd1);

assign xor_ln106_fu_654_p2 = (icmp_ln90_fu_593_p2 ^ 1'd1);

assign xor_ln44_fu_390_p2 = (1'd1 ^ and_ln44_fu_86_p2);

assign xor_ln48_fu_366_p2 = (1'd1 ^ and_ln48_fu_118_p2);

assign xor_ln52_1_fu_252_p2 = (or_ln52_1_fu_246_p2 ^ 1'd1);

assign xor_ln52_2_fu_470_p2 = (1'd1 ^ and_ln52_1_fu_464_p2);

assign xor_ln52_fu_220_p2 = (or_ln52_fu_214_p2 ^ 1'd1);

assign xor_ln56_1_fu_348_p2 = (1'd1 ^ and_ln56_fu_154_p2);

assign xor_ln56_fu_278_p2 = (or_ln56_fu_272_p2 ^ 1'd1);

assign xor_ln63_fu_418_p2 = (or_ln63_fu_298_p2 ^ 1'd1);

assign xor_ln70_1_fu_310_p2 = (or_ln70_fu_304_p2 ^ 1'd1);

assign xor_ln70_fu_190_p2 = (1'd1 ^ and_ln70_fu_178_p2);

assign xor_ln77_1_fu_384_p2 = (or_ln77_5_fu_378_p2 ^ 1'd1);

assign xor_ln77_2_fu_452_p2 = (or_ln77_6_fu_446_p2 ^ 1'd1);

assign xor_ln77_3_fu_488_p2 = (or_ln77_8_fu_482_p2 ^ 1'd1);

assign xor_ln77_fu_336_p2 = (or_ln77_2_fu_330_p2 ^ 1'd1);

assign xor_ln90_fu_681_p2 = (1'd1 ^ and_ln90_fu_602_p2);

assign xor_ln94_fu_699_p2 = (or_ln94_fu_693_p2 ^ 1'd1);

assign zext_ln106_fu_765_p1 = select_ln106_fu_757_p3;

assign zext_ln120_fu_793_p1 = or_ln106_2_fu_787_p2;

assign zext_ln90_fu_677_p1 = and_ln110_fu_671_p2;

endmodule //traitCoul_detectCoul
