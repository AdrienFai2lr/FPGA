// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="traitCoul_traitCoul,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.722000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=295,HLS_SYN_LUT=1804,HLS_VERSION=2023_2}" *)

module traitCoul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pixIn,
        pixOut,
        pixOut_ap_vld,
        resultats,
        resultats_ap_vld,
        valid,
        valid_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [95:0] pixIn;
output  [95:0] pixOut;
output   pixOut_ap_vld;
output  [7:0] resultats;
output   resultats_ap_vld;
output  [7:0] valid;
output   valid_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pixOut_ap_vld;
reg resultats_ap_vld;
reg valid_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [31:0] valR_fu_95_p1;
reg   [31:0] valR_reg_203;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] valG_reg_212;
reg   [31:0] valB_reg_221;
reg    grp_detectCoul_fu_81_ap_start;
wire    grp_detectCoul_fu_81_ap_done;
wire    grp_detectCoul_fu_81_ap_idle;
wire    grp_detectCoul_fu_81_ap_ready;
wire   [7:0] grp_detectCoul_fu_81_ap_return_0;
wire   [7:0] grp_detectCoul_fu_81_ap_return_1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln15_fu_119_p2;
wire   [0:0] icmp_ln15_1_fu_123_p2;
wire   [0:0] or_ln15_fu_127_p2;
wire   [0:0] icmp_ln16_fu_140_p2;
wire   [0:0] icmp_ln16_1_fu_144_p2;
wire   [0:0] or_ln16_fu_148_p2;
wire   [0:0] icmp_ln17_fu_161_p2;
wire   [0:0] icmp_ln17_1_fu_165_p2;
wire   [0:0] or_ln17_fu_169_p2;
wire   [31:0] resB_fu_175_p3;
wire   [31:0] resG_fu_154_p3;
wire   [31:0] resR_fu_133_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

traitCoul_detectCoul grp_detectCoul_fu_81(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_detectCoul_fu_81_ap_start),
    .ap_done(grp_detectCoul_fu_81_ap_done),
    .ap_idle(grp_detectCoul_fu_81_ap_idle),
    .ap_ready(grp_detectCoul_fu_81_ap_ready),
    .pixIn_val(pixIn),
    .ap_return_0(grp_detectCoul_fu_81_ap_return_0),
    .ap_return_1(grp_detectCoul_fu_81_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        valB_reg_221 <= {{pixIn[95:64]}};
        valG_reg_212 <= {{pixIn[63:32]}};
        valR_reg_203 <= valR_fu_95_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_detectCoul_fu_81_ap_start = 1'b1;
    end else begin
        grp_detectCoul_fu_81_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixOut_ap_vld = 1'b1;
    end else begin
        pixOut_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resultats_ap_vld = 1'b1;
    end else begin
        resultats_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        valid_ap_vld = 1'b1;
    end else begin
        valid_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln15_1_fu_123_p2 = (($signed(valR_reg_203) < $signed(valB_reg_221)) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_119_p2 = (($signed(valR_reg_203) < $signed(valG_reg_212)) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_144_p2 = (($signed(valG_reg_212) < $signed(valB_reg_221)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_140_p2 = (($signed(valG_reg_212) < $signed(valR_reg_203)) ? 1'b1 : 1'b0);

assign icmp_ln17_1_fu_165_p2 = (($signed(valB_reg_221) < $signed(valG_reg_212)) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_161_p2 = (($signed(valB_reg_221) < $signed(valR_reg_203)) ? 1'b1 : 1'b0);

assign or_ln15_fu_127_p2 = (icmp_ln15_fu_119_p2 | icmp_ln15_1_fu_123_p2);

assign or_ln16_fu_148_p2 = (icmp_ln16_fu_140_p2 | icmp_ln16_1_fu_144_p2);

assign or_ln17_fu_169_p2 = (icmp_ln17_fu_161_p2 | icmp_ln17_1_fu_165_p2);

assign pixOut = {{{resB_fu_175_p3}, {resG_fu_154_p3}}, {resR_fu_133_p3}};

assign resB_fu_175_p3 = ((or_ln17_fu_169_p2[0:0] == 1'b1) ? 32'd0 : valB_reg_221);

assign resG_fu_154_p3 = ((or_ln16_fu_148_p2[0:0] == 1'b1) ? 32'd0 : valG_reg_212);

assign resR_fu_133_p3 = ((or_ln15_fu_127_p2[0:0] == 1'b1) ? 32'd0 : valR_reg_203);

assign resultats = grp_detectCoul_fu_81_ap_return_0;

assign valR_fu_95_p1 = pixIn[31:0];

assign valid = grp_detectCoul_fu_81_ap_return_1;

endmodule //traitCoul
