// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="detectCoul_detectCoul,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.722000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=197,HLS_SYN_LUT=1466,HLS_VERSION=2023_2}" *)

module detectCoul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        resultats,
        resultats_ap_vld,
        valid,
        valid_ap_vld,
        pixIn
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] resultats;
output   resultats_ap_vld;
output  [7:0] valid;
output   valid_ap_vld;
input  [95:0] pixIn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg resultats_ap_vld;
reg valid_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
reg   [31:0] cptR;
reg   [31:0] cptG;
reg   [31:0] cptB;
reg   [31:0] cptPix;
wire   [31:0] select_ln77_fu_350_p3;
reg   [31:0] select_ln77_reg_840;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] select_ln77_1_fu_466_p3;
reg   [31:0] select_ln77_1_reg_850;
wire   [0:0] or_ln77_8_fu_510_p2;
reg   [0:0] or_ln77_8_reg_860;
wire   [0:0] icmp_ln120_fu_532_p2;
reg   [0:0] icmp_ln120_reg_865;
wire   [0:0] or_ln120_2_fu_572_p2;
reg   [0:0] or_ln120_2_reg_876;
wire   [31:0] select_ln120_fu_550_p3;
wire   [0:0] or_ln120_fu_544_p2;
wire    ap_block_pp0_stage0;
wire   [31:0] select_ln120_1_fu_564_p3;
wire   [0:0] or_ln120_1_fu_558_p2;
wire   [31:0] select_ln120_2_fu_827_p3;
wire   [31:0] select_ln120_3_fu_578_p3;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] pixIn_r_fu_78_p1;
wire   [31:0] pixIn_g_fu_82_p4;
wire   [31:0] pixIn_b_fu_92_p4;
wire   [0:0] icmp_ln44_fu_102_p2;
wire   [0:0] icmp_ln44_1_fu_108_p2;
wire   [0:0] icmp_ln48_fu_134_p2;
wire   [0:0] icmp_ln48_1_fu_140_p2;
wire   [0:0] icmp_ln52_fu_158_p2;
wire   [0:0] icmp_ln52_1_fu_164_p2;
wire   [0:0] icmp_ln56_fu_176_p2;
wire   [0:0] icmp_ln63_fu_188_p2;
wire   [0:0] icmp_ln70_fu_200_p2;
wire   [0:0] and_ln70_fu_206_p2;
wire   [0:0] and_ln77_fu_212_p2;
wire   [0:0] xor_ln70_fu_218_p2;
wire   [0:0] and_ln63_fu_194_p2;
wire   [0:0] and_ln77_1_fu_224_p2;
wire   [0:0] or_ln77_fu_230_p2;
wire   [0:0] and_ln56_fu_182_p2;
wire   [0:0] and_ln48_fu_146_p2;
wire   [0:0] and_ln52_fu_170_p2;
wire   [0:0] or_ln52_fu_242_p2;
wire   [0:0] or_ln77_1_fu_236_p2;
wire   [0:0] xor_ln52_fu_248_p2;
wire   [0:0] and_ln44_fu_114_p2;
wire   [31:0] add_ln46_fu_128_p2;
wire   [0:0] or_ln48_fu_268_p2;
wire   [0:0] or_ln52_1_fu_274_p2;
wire   [0:0] xor_ln52_1_fu_280_p2;
wire   [0:0] and_ln56_1_fu_286_p2;
wire   [31:0] select_ln44_fu_260_p3;
wire   [0:0] or_ln56_fu_300_p2;
wire   [0:0] xor_ln56_fu_306_p2;
wire   [0:0] and_ln63_1_fu_312_p2;
wire   [31:0] select_ln56_fu_292_p3;
wire   [0:0] or_ln63_fu_326_p2;
wire   [0:0] or_ln70_fu_332_p2;
wire   [0:0] xor_ln70_1_fu_338_p2;
wire   [0:0] and_ln77_3_fu_344_p2;
wire   [31:0] select_ln63_fu_318_p3;
wire   [0:0] or_ln77_2_fu_358_p2;
wire   [0:0] xor_ln77_fu_364_p2;
wire   [0:0] or_ln77_3_fu_370_p2;
wire   [0:0] xor_ln56_1_fu_376_p2;
wire   [0:0] and_ln77_4_fu_382_p2;
wire   [0:0] or_ln77_4_fu_388_p2;
wire   [0:0] xor_ln48_fu_394_p2;
wire   [0:0] and_ln77_5_fu_400_p2;
wire   [0:0] or_ln77_5_fu_406_p2;
wire   [0:0] xor_ln44_fu_418_p2;
wire   [0:0] and_ln48_1_fu_424_p2;
wire   [31:0] add_ln50_fu_152_p2;
wire   [31:0] select_ln48_fu_430_p3;
wire   [0:0] xor_ln63_fu_446_p2;
wire   [0:0] and_ln70_1_fu_452_p2;
wire   [31:0] select_ln56_1_fu_438_p3;
wire   [31:0] select_ln70_fu_458_p3;
wire   [0:0] or_ln77_6_fu_474_p2;
wire   [0:0] xor_ln77_2_fu_480_p2;
wire   [0:0] and_ln52_1_fu_492_p2;
wire   [0:0] or_ln77_7_fu_486_p2;
wire   [0:0] xor_ln52_2_fu_498_p2;
wire   [0:0] and_ln77_6_fu_504_p2;
wire   [31:0] add_ln88_fu_526_p2;
wire   [0:0] and_ln77_2_fu_254_p2;
wire   [0:0] or_ln120_3_fu_538_p2;
wire   [0:0] xor_ln77_1_fu_412_p2;
wire   [0:0] xor_ln77_3_fu_516_p2;
wire   [31:0] add_ln70_fu_608_p2;
wire   [31:0] select_ln77_2_fu_614_p3;
wire   [0:0] icmp_ln90_fu_621_p2;
wire   [0:0] icmp_ln90_1_fu_625_p2;
wire   [0:0] icmp_ln94_fu_636_p2;
wire   [0:0] icmp_ln94_1_fu_640_p2;
wire   [0:0] icmp_ln98_fu_651_p2;
wire   [0:0] icmp_ln98_1_fu_656_p2;
wire   [0:0] icmp_ln102_fu_667_p2;
wire   [0:0] icmp_ln106_fu_677_p2;
wire   [0:0] xor_ln106_fu_682_p2;
wire   [0:0] icmp_ln110_fu_694_p2;
wire   [0:0] and_ln110_fu_699_p2;
wire   [0:0] and_ln90_fu_630_p2;
wire   [0:0] and_ln94_fu_645_p2;
wire   [0:0] xor_ln90_fu_709_p2;
wire   [0:0] or_ln94_fu_721_p2;
wire   [0:0] and_ln98_fu_661_p2;
wire   [0:0] xor_ln94_fu_727_p2;
wire   [0:0] and_ln98_1_fu_733_p2;
wire   [0:0] and_ln94_1_fu_715_p2;
wire   [0:0] or_ln98_fu_747_p2;
wire   [1:0] select_ln98_fu_739_p3;
wire   [0:0] and_ln102_fu_671_p2;
wire   [0:0] or_ln102_fu_761_p2;
wire   [0:0] or_ln102_1_fu_767_p2;
wire   [0:0] or_ln106_fu_688_p2;
wire   [0:0] xor_ln102_fu_773_p2;
wire   [0:0] and_ln106_fu_779_p2;
wire   [1:0] zext_ln90_fu_705_p1;
wire   [1:0] select_ln98_1_fu_753_p3;
wire   [1:0] select_ln106_fu_785_p3;
wire   [0:0] xor_ln106_1_fu_798_p2;
wire   [0:0] and_ln106_1_fu_804_p2;
wire   [0:0] or_ln106_1_fu_810_p2;
wire   [0:0] or_ln106_2_fu_816_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 cptR = 32'd0;
#0 cptG = 32'd0;
#0 cptB = 32'd0;
#0 cptPix = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln120_2_reg_876 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cptB <= select_ln120_2_fu_827_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln120_1_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cptG <= select_ln120_1_fu_564_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cptPix <= select_ln120_3_fu_578_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln120_fu_544_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cptR <= select_ln120_fu_550_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln120_reg_865 <= icmp_ln120_fu_532_p2;
        or_ln120_2_reg_876 <= or_ln120_2_fu_572_p2;
        or_ln77_8_reg_860 <= or_ln77_8_fu_510_p2;
        select_ln77_1_reg_850 <= select_ln77_1_fu_466_p3;
        select_ln77_reg_840 <= select_ln77_fu_350_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resultats_ap_vld = 1'b1;
    end else begin
        resultats_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        valid_ap_vld = 1'b1;
    end else begin
        valid_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_128_p2 = (cptR + 32'd1);

assign add_ln50_fu_152_p2 = (cptG + 32'd1);

assign add_ln70_fu_608_p2 = (cptB + 32'd1);

assign add_ln88_fu_526_p2 = (cptPix + 32'd1);

assign and_ln102_fu_671_p2 = (icmp_ln90_1_fu_625_p2 & icmp_ln102_fu_667_p2);

assign and_ln106_1_fu_804_p2 = (xor_ln106_1_fu_798_p2 & icmp_ln90_fu_621_p2);

assign and_ln106_fu_779_p2 = (xor_ln102_fu_773_p2 & or_ln106_fu_688_p2);

assign and_ln110_fu_699_p2 = (icmp_ln94_fu_636_p2 & icmp_ln110_fu_694_p2);

assign and_ln44_fu_114_p2 = (icmp_ln44_fu_102_p2 & icmp_ln44_1_fu_108_p2);

assign and_ln48_1_fu_424_p2 = (xor_ln44_fu_418_p2 & and_ln48_fu_146_p2);

assign and_ln48_fu_146_p2 = (icmp_ln48_fu_134_p2 & icmp_ln48_1_fu_140_p2);

assign and_ln52_1_fu_492_p2 = (icmp_ln52_fu_158_p2 & icmp_ln52_1_fu_164_p2);

assign and_ln52_fu_170_p2 = (icmp_ln52_fu_158_p2 & icmp_ln52_1_fu_164_p2);

assign and_ln56_1_fu_286_p2 = (xor_ln52_1_fu_280_p2 & and_ln56_fu_182_p2);

assign and_ln56_fu_182_p2 = (icmp_ln56_fu_176_p2 & icmp_ln44_1_fu_108_p2);

assign and_ln63_1_fu_312_p2 = (xor_ln56_fu_306_p2 & and_ln63_fu_194_p2);

assign and_ln63_fu_194_p2 = (icmp_ln63_fu_188_p2 & icmp_ln44_fu_102_p2);

assign and_ln70_1_fu_452_p2 = (xor_ln63_fu_446_p2 & and_ln70_fu_206_p2);

assign and_ln70_fu_206_p2 = (icmp_ln70_fu_200_p2 & icmp_ln48_fu_134_p2);

assign and_ln77_1_fu_224_p2 = (xor_ln70_fu_218_p2 & and_ln77_fu_212_p2);

assign and_ln77_2_fu_254_p2 = (xor_ln52_fu_248_p2 & or_ln77_1_fu_236_p2);

assign and_ln77_3_fu_344_p2 = (xor_ln70_1_fu_338_p2 & and_ln77_fu_212_p2);

assign and_ln77_4_fu_382_p2 = (xor_ln56_1_fu_376_p2 & or_ln77_3_fu_370_p2);

assign and_ln77_5_fu_400_p2 = (xor_ln48_fu_394_p2 & or_ln77_4_fu_388_p2);

assign and_ln77_6_fu_504_p2 = (xor_ln52_2_fu_498_p2 & or_ln77_7_fu_486_p2);

assign and_ln77_fu_212_p2 = (icmp_ln63_fu_188_p2 & icmp_ln56_fu_176_p2);

assign and_ln90_fu_630_p2 = (icmp_ln90_fu_621_p2 & icmp_ln90_1_fu_625_p2);

assign and_ln94_1_fu_715_p2 = (xor_ln90_fu_709_p2 & and_ln94_fu_645_p2);

assign and_ln94_fu_645_p2 = (icmp_ln94_fu_636_p2 & icmp_ln94_1_fu_640_p2);

assign and_ln98_1_fu_733_p2 = (xor_ln94_fu_727_p2 & and_ln98_fu_661_p2);

assign and_ln98_fu_661_p2 = (icmp_ln98_fu_651_p2 & icmp_ln98_1_fu_656_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln102_fu_667_p2 = ((select_ln77_reg_840 == select_ln77_1_reg_850) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_677_p2 = ((select_ln77_reg_840 != select_ln77_2_fu_614_p3) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_694_p2 = ((select_ln77_1_reg_850 == select_ln77_2_fu_614_p3) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_532_p2 = ((add_ln88_fu_526_p2 == 32'd107200) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_108_p2 = (($signed(pixIn_r_fu_78_p1) > $signed(pixIn_b_fu_92_p4)) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_102_p2 = (($signed(pixIn_r_fu_78_p1) > $signed(pixIn_g_fu_82_p4)) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_140_p2 = (($signed(pixIn_g_fu_82_p4) > $signed(pixIn_b_fu_92_p4)) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_134_p2 = (($signed(pixIn_g_fu_82_p4) > $signed(pixIn_r_fu_78_p1)) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_164_p2 = (($signed(pixIn_b_fu_92_p4) > $signed(pixIn_g_fu_82_p4)) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_158_p2 = (($signed(pixIn_b_fu_92_p4) > $signed(pixIn_r_fu_78_p1)) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_176_p2 = ((pixIn_r_fu_78_p1 == pixIn_g_fu_82_p4) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_188_p2 = ((pixIn_r_fu_78_p1 == pixIn_b_fu_92_p4) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_200_p2 = ((pixIn_g_fu_82_p4 == pixIn_b_fu_92_p4) ? 1'b1 : 1'b0);

assign icmp_ln90_1_fu_625_p2 = (($signed(select_ln77_reg_840) > $signed(select_ln77_2_fu_614_p3)) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_621_p2 = (($signed(select_ln77_reg_840) > $signed(select_ln77_1_reg_850)) ? 1'b1 : 1'b0);

assign icmp_ln94_1_fu_640_p2 = (($signed(select_ln77_1_reg_850) > $signed(select_ln77_2_fu_614_p3)) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_636_p2 = (($signed(select_ln77_1_reg_850) > $signed(select_ln77_reg_840)) ? 1'b1 : 1'b0);

assign icmp_ln98_1_fu_656_p2 = (($signed(select_ln77_2_fu_614_p3) > $signed(select_ln77_1_reg_850)) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_651_p2 = (($signed(select_ln77_2_fu_614_p3) > $signed(select_ln77_reg_840)) ? 1'b1 : 1'b0);

assign or_ln102_1_fu_767_p2 = (or_ln94_fu_721_p2 | or_ln102_fu_761_p2);

assign or_ln102_fu_761_p2 = (and_ln98_fu_661_p2 | and_ln102_fu_671_p2);

assign or_ln106_1_fu_810_p2 = (or_ln102_1_fu_767_p2 | and_ln106_1_fu_804_p2);

assign or_ln106_2_fu_816_p2 = (or_ln106_1_fu_810_p2 | and_ln110_fu_699_p2);

assign or_ln106_fu_688_p2 = (xor_ln106_fu_682_p2 | icmp_ln106_fu_677_p2);

assign or_ln120_1_fu_558_p2 = (xor_ln77_1_fu_412_p2 | icmp_ln120_fu_532_p2);

assign or_ln120_2_fu_572_p2 = (xor_ln77_3_fu_516_p2 | icmp_ln120_fu_532_p2);

assign or_ln120_3_fu_538_p2 = (icmp_ln120_fu_532_p2 | and_ln77_2_fu_254_p2);

assign or_ln120_fu_544_p2 = (or_ln120_3_fu_538_p2 | and_ln44_fu_114_p2);

assign or_ln48_fu_268_p2 = (and_ln48_fu_146_p2 | and_ln44_fu_114_p2);

assign or_ln52_1_fu_274_p2 = (or_ln48_fu_268_p2 | and_ln52_fu_170_p2);

assign or_ln52_fu_242_p2 = (and_ln52_fu_170_p2 | and_ln48_fu_146_p2);

assign or_ln56_fu_300_p2 = (or_ln52_1_fu_274_p2 | and_ln56_fu_182_p2);

assign or_ln63_fu_326_p2 = (or_ln56_fu_300_p2 | and_ln63_fu_194_p2);

assign or_ln70_fu_332_p2 = (or_ln63_fu_326_p2 | and_ln70_fu_206_p2);

assign or_ln77_1_fu_236_p2 = (or_ln77_fu_230_p2 | and_ln56_fu_182_p2);

assign or_ln77_2_fu_358_p2 = (and_ln77_fu_212_p2 | and_ln70_fu_206_p2);

assign or_ln77_3_fu_370_p2 = (xor_ln77_fu_364_p2 | and_ln63_fu_194_p2);

assign or_ln77_4_fu_388_p2 = (and_ln77_4_fu_382_p2 | and_ln52_fu_170_p2);

assign or_ln77_5_fu_406_p2 = (and_ln77_5_fu_400_p2 | and_ln44_fu_114_p2);

assign or_ln77_6_fu_474_p2 = (or_ln77_2_fu_358_p2 | and_ln63_fu_194_p2);

assign or_ln77_7_fu_486_p2 = (xor_ln77_2_fu_480_p2 | and_ln56_fu_182_p2);

assign or_ln77_8_fu_510_p2 = (or_ln48_fu_268_p2 | and_ln77_6_fu_504_p2);

assign or_ln77_fu_230_p2 = (and_ln77_1_fu_224_p2 | and_ln63_fu_194_p2);

assign or_ln94_fu_721_p2 = (and_ln94_fu_645_p2 | and_ln90_fu_630_p2);

assign or_ln98_fu_747_p2 = (and_ln98_1_fu_733_p2 | and_ln94_1_fu_715_p2);

assign pixIn_b_fu_92_p4 = {{pixIn[95:64]}};

assign pixIn_g_fu_82_p4 = {{pixIn[63:32]}};

assign pixIn_r_fu_78_p1 = pixIn[31:0];

assign resultats = select_ln106_fu_785_p3;

assign select_ln106_fu_785_p3 = ((and_ln106_fu_779_p2[0:0] == 1'b1) ? zext_ln90_fu_705_p1 : select_ln98_1_fu_753_p3);

assign select_ln120_1_fu_564_p3 = ((icmp_ln120_fu_532_p2[0:0] == 1'b1) ? 32'd0 : select_ln77_1_fu_466_p3);

assign select_ln120_2_fu_827_p3 = ((icmp_ln120_reg_865[0:0] == 1'b1) ? 32'd0 : select_ln77_2_fu_614_p3);

assign select_ln120_3_fu_578_p3 = ((icmp_ln120_fu_532_p2[0:0] == 1'b1) ? 32'd0 : add_ln88_fu_526_p2);

assign select_ln120_fu_550_p3 = ((icmp_ln120_fu_532_p2[0:0] == 1'b1) ? 32'd0 : select_ln77_fu_350_p3);

assign select_ln44_fu_260_p3 = ((and_ln44_fu_114_p2[0:0] == 1'b1) ? add_ln46_fu_128_p2 : cptR);

assign select_ln48_fu_430_p3 = ((and_ln48_1_fu_424_p2[0:0] == 1'b1) ? add_ln50_fu_152_p2 : cptG);

assign select_ln56_1_fu_438_p3 = ((and_ln56_1_fu_286_p2[0:0] == 1'b1) ? add_ln50_fu_152_p2 : select_ln48_fu_430_p3);

assign select_ln56_fu_292_p3 = ((and_ln56_1_fu_286_p2[0:0] == 1'b1) ? add_ln46_fu_128_p2 : select_ln44_fu_260_p3);

assign select_ln63_fu_318_p3 = ((and_ln63_1_fu_312_p2[0:0] == 1'b1) ? add_ln46_fu_128_p2 : select_ln56_fu_292_p3);

assign select_ln70_fu_458_p3 = ((and_ln70_1_fu_452_p2[0:0] == 1'b1) ? add_ln50_fu_152_p2 : select_ln56_1_fu_438_p3);

assign select_ln77_1_fu_466_p3 = ((and_ln77_3_fu_344_p2[0:0] == 1'b1) ? add_ln50_fu_152_p2 : select_ln70_fu_458_p3);

assign select_ln77_2_fu_614_p3 = ((or_ln77_8_reg_860[0:0] == 1'b1) ? cptB : add_ln70_fu_608_p2);

assign select_ln77_fu_350_p3 = ((and_ln77_3_fu_344_p2[0:0] == 1'b1) ? add_ln46_fu_128_p2 : select_ln63_fu_318_p3);

assign select_ln98_1_fu_753_p3 = ((or_ln98_fu_747_p2[0:0] == 1'b1) ? select_ln98_fu_739_p3 : 2'd2);

assign select_ln98_fu_739_p3 = ((and_ln98_1_fu_733_p2[0:0] == 1'b1) ? 2'd0 : 2'd1);

assign valid = or_ln106_2_fu_816_p2;

assign xor_ln102_fu_773_p2 = (or_ln102_1_fu_767_p2 ^ 1'd1);

assign xor_ln106_1_fu_798_p2 = (icmp_ln106_fu_677_p2 ^ 1'd1);

assign xor_ln106_fu_682_p2 = (icmp_ln90_fu_621_p2 ^ 1'd1);

assign xor_ln44_fu_418_p2 = (1'd1 ^ and_ln44_fu_114_p2);

assign xor_ln48_fu_394_p2 = (1'd1 ^ and_ln48_fu_146_p2);

assign xor_ln52_1_fu_280_p2 = (or_ln52_1_fu_274_p2 ^ 1'd1);

assign xor_ln52_2_fu_498_p2 = (1'd1 ^ and_ln52_1_fu_492_p2);

assign xor_ln52_fu_248_p2 = (or_ln52_fu_242_p2 ^ 1'd1);

assign xor_ln56_1_fu_376_p2 = (1'd1 ^ and_ln56_fu_182_p2);

assign xor_ln56_fu_306_p2 = (or_ln56_fu_300_p2 ^ 1'd1);

assign xor_ln63_fu_446_p2 = (or_ln63_fu_326_p2 ^ 1'd1);

assign xor_ln70_1_fu_338_p2 = (or_ln70_fu_332_p2 ^ 1'd1);

assign xor_ln70_fu_218_p2 = (1'd1 ^ and_ln70_fu_206_p2);

assign xor_ln77_1_fu_412_p2 = (or_ln77_5_fu_406_p2 ^ 1'd1);

assign xor_ln77_2_fu_480_p2 = (or_ln77_6_fu_474_p2 ^ 1'd1);

assign xor_ln77_3_fu_516_p2 = (or_ln77_8_fu_510_p2 ^ 1'd1);

assign xor_ln77_fu_364_p2 = (or_ln77_2_fu_358_p2 ^ 1'd1);

assign xor_ln90_fu_709_p2 = (1'd1 ^ and_ln90_fu_630_p2);

assign xor_ln94_fu_727_p2 = (or_ln94_fu_721_p2 ^ 1'd1);

assign zext_ln90_fu_705_p1 = and_ln110_fu_699_p2;

endmodule //detectCoul
