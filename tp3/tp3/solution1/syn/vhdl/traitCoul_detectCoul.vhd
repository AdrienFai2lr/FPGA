-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity traitCoul_detectCoul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pixIn_val : IN STD_LOGIC_VECTOR (95 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of traitCoul_detectCoul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1A2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011010001011000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal cptR : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cptG : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cptB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cptPix : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln77_fu_322_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln77_1_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_1_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln77_8_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_8_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_847 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_2_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_2_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln120_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal select_ln120_1_fu_536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln120_1_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_2_fu_797_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln120_3_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal valR_fu_50_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valG_fu_54_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal valB_fu_64_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln44_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_1_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln70_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln63_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_1_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln48_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_1_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_fu_100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln48_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_1_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_1_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln44_fu_232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln56_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln63_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_fu_264_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln63_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln70_1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_3_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln63_fu_290_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln77_2_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_3_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_1_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_4_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_4_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_5_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_5_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln48_1_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln48_fu_402_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln63_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_1_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_fu_430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln77_6_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_2_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_7_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_2_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_6_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln88_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln77_2_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln120_3_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_1_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_3_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_2_fu_586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln90_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_1_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_1_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln106_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln110_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln90_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln90_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln98_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln94_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln98_1_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_1_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln98_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln98_fu_711_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln102_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln102_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln102_1_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln106_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln102_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln106_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln90_fu_677_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln98_1_fu_725_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln106_fu_757_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln106_1_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln106_1_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln106_1_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln106_2_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln106_fu_765_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln120_fu_793_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln120_2_reg_858 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cptB <= select_ln120_2_fu_797_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln120_1_fu_530_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cptG <= select_ln120_1_fu_536_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cptPix <= select_ln120_3_fu_550_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln120_fu_516_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cptR <= select_ln120_fu_522_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln120_reg_847 <= icmp_ln120_fu_504_p2;
                or_ln120_2_reg_858 <= or_ln120_2_fu_544_p2;
                or_ln77_8_reg_842 <= or_ln77_8_fu_482_p2;
                select_ln77_1_reg_832 <= select_ln77_1_fu_438_p3;
                select_ln77_reg_822 <= select_ln77_fu_322_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln46_fu_100_p2 <= std_logic_vector(unsigned(cptR) + unsigned(ap_const_lv32_1));
    add_ln50_fu_124_p2 <= std_logic_vector(unsigned(cptG) + unsigned(ap_const_lv32_1));
    add_ln70_fu_580_p2 <= std_logic_vector(unsigned(cptB) + unsigned(ap_const_lv32_1));
    add_ln88_fu_498_p2 <= std_logic_vector(unsigned(cptPix) + unsigned(ap_const_lv32_1));
    and_ln102_fu_643_p2 <= (icmp_ln90_1_fu_597_p2 and icmp_ln102_fu_639_p2);
    and_ln106_1_fu_775_p2 <= (xor_ln106_1_fu_769_p2 and icmp_ln90_fu_593_p2);
    and_ln106_fu_751_p2 <= (xor_ln102_fu_745_p2 and or_ln106_fu_660_p2);
    and_ln110_fu_671_p2 <= (icmp_ln94_fu_608_p2 and icmp_ln110_fu_666_p2);
    and_ln44_fu_86_p2 <= (icmp_ln44_fu_74_p2 and icmp_ln44_1_fu_80_p2);
    and_ln48_1_fu_396_p2 <= (xor_ln44_fu_390_p2 and and_ln48_fu_118_p2);
    and_ln48_fu_118_p2 <= (icmp_ln48_fu_106_p2 and icmp_ln48_1_fu_112_p2);
    and_ln52_1_fu_464_p2 <= (icmp_ln52_fu_130_p2 and icmp_ln52_1_fu_136_p2);
    and_ln52_fu_142_p2 <= (icmp_ln52_fu_130_p2 and icmp_ln52_1_fu_136_p2);
    and_ln56_1_fu_258_p2 <= (xor_ln52_1_fu_252_p2 and and_ln56_fu_154_p2);
    and_ln56_fu_154_p2 <= (icmp_ln56_fu_148_p2 and icmp_ln44_1_fu_80_p2);
    and_ln63_1_fu_284_p2 <= (xor_ln56_fu_278_p2 and and_ln63_fu_166_p2);
    and_ln63_fu_166_p2 <= (icmp_ln63_fu_160_p2 and icmp_ln44_fu_74_p2);
    and_ln70_1_fu_424_p2 <= (xor_ln63_fu_418_p2 and and_ln70_fu_178_p2);
    and_ln70_fu_178_p2 <= (icmp_ln70_fu_172_p2 and icmp_ln48_fu_106_p2);
    and_ln77_1_fu_196_p2 <= (xor_ln70_fu_190_p2 and and_ln77_fu_184_p2);
    and_ln77_2_fu_226_p2 <= (xor_ln52_fu_220_p2 and or_ln77_1_fu_208_p2);
    and_ln77_3_fu_316_p2 <= (xor_ln70_1_fu_310_p2 and and_ln77_fu_184_p2);
    and_ln77_4_fu_354_p2 <= (xor_ln56_1_fu_348_p2 and or_ln77_3_fu_342_p2);
    and_ln77_5_fu_372_p2 <= (xor_ln48_fu_366_p2 and or_ln77_4_fu_360_p2);
    and_ln77_6_fu_476_p2 <= (xor_ln52_2_fu_470_p2 and or_ln77_7_fu_458_p2);
    and_ln77_fu_184_p2 <= (icmp_ln63_fu_160_p2 and icmp_ln56_fu_148_p2);
    and_ln90_fu_602_p2 <= (icmp_ln90_fu_593_p2 and icmp_ln90_1_fu_597_p2);
    and_ln94_1_fu_687_p2 <= (xor_ln90_fu_681_p2 and and_ln94_fu_617_p2);
    and_ln94_fu_617_p2 <= (icmp_ln94_fu_608_p2 and icmp_ln94_1_fu_612_p2);
    and_ln98_1_fu_705_p2 <= (xor_ln94_fu_699_p2 and and_ln98_fu_633_p2);
    and_ln98_fu_633_p2 <= (icmp_ln98_fu_623_p2 and icmp_ln98_1_fu_628_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= zext_ln106_fu_765_p1;
    ap_return_1 <= zext_ln120_fu_793_p1;
    icmp_ln102_fu_639_p2 <= "1" when (select_ln77_reg_822 = select_ln77_1_reg_832) else "0";
    icmp_ln106_fu_649_p2 <= "0" when (select_ln77_reg_822 = select_ln77_2_fu_586_p3) else "1";
    icmp_ln110_fu_666_p2 <= "1" when (select_ln77_1_reg_832 = select_ln77_2_fu_586_p3) else "0";
    icmp_ln120_fu_504_p2 <= "1" when (add_ln88_fu_498_p2 = ap_const_lv32_1A2C0) else "0";
    icmp_ln44_1_fu_80_p2 <= "1" when (signed(valR_fu_50_p1) > signed(valB_fu_64_p4)) else "0";
    icmp_ln44_fu_74_p2 <= "1" when (signed(valR_fu_50_p1) > signed(valG_fu_54_p4)) else "0";
    icmp_ln48_1_fu_112_p2 <= "1" when (signed(valG_fu_54_p4) > signed(valB_fu_64_p4)) else "0";
    icmp_ln48_fu_106_p2 <= "1" when (signed(valG_fu_54_p4) > signed(valR_fu_50_p1)) else "0";
    icmp_ln52_1_fu_136_p2 <= "1" when (signed(valB_fu_64_p4) > signed(valG_fu_54_p4)) else "0";
    icmp_ln52_fu_130_p2 <= "1" when (signed(valB_fu_64_p4) > signed(valR_fu_50_p1)) else "0";
    icmp_ln56_fu_148_p2 <= "1" when (valR_fu_50_p1 = valG_fu_54_p4) else "0";
    icmp_ln63_fu_160_p2 <= "1" when (valR_fu_50_p1 = valB_fu_64_p4) else "0";
    icmp_ln70_fu_172_p2 <= "1" when (valG_fu_54_p4 = valB_fu_64_p4) else "0";
    icmp_ln90_1_fu_597_p2 <= "1" when (signed(select_ln77_reg_822) > signed(select_ln77_2_fu_586_p3)) else "0";
    icmp_ln90_fu_593_p2 <= "1" when (signed(select_ln77_reg_822) > signed(select_ln77_1_reg_832)) else "0";
    icmp_ln94_1_fu_612_p2 <= "1" when (signed(select_ln77_1_reg_832) > signed(select_ln77_2_fu_586_p3)) else "0";
    icmp_ln94_fu_608_p2 <= "1" when (signed(select_ln77_1_reg_832) > signed(select_ln77_reg_822)) else "0";
    icmp_ln98_1_fu_628_p2 <= "1" when (signed(select_ln77_2_fu_586_p3) > signed(select_ln77_1_reg_832)) else "0";
    icmp_ln98_fu_623_p2 <= "1" when (signed(select_ln77_2_fu_586_p3) > signed(select_ln77_reg_822)) else "0";
    or_ln102_1_fu_739_p2 <= (or_ln94_fu_693_p2 or or_ln102_fu_733_p2);
    or_ln102_fu_733_p2 <= (and_ln98_fu_633_p2 or and_ln102_fu_643_p2);
    or_ln106_1_fu_781_p2 <= (or_ln102_1_fu_739_p2 or and_ln106_1_fu_775_p2);
    or_ln106_2_fu_787_p2 <= (or_ln106_1_fu_781_p2 or and_ln110_fu_671_p2);
    or_ln106_fu_660_p2 <= (xor_ln106_fu_654_p2 or icmp_ln106_fu_649_p2);
    or_ln120_1_fu_530_p2 <= (xor_ln77_1_fu_384_p2 or icmp_ln120_fu_504_p2);
    or_ln120_2_fu_544_p2 <= (xor_ln77_3_fu_488_p2 or icmp_ln120_fu_504_p2);
    or_ln120_3_fu_510_p2 <= (icmp_ln120_fu_504_p2 or and_ln77_2_fu_226_p2);
    or_ln120_fu_516_p2 <= (or_ln120_3_fu_510_p2 or and_ln44_fu_86_p2);
    or_ln48_fu_240_p2 <= (and_ln48_fu_118_p2 or and_ln44_fu_86_p2);
    or_ln52_1_fu_246_p2 <= (or_ln48_fu_240_p2 or and_ln52_fu_142_p2);
    or_ln52_fu_214_p2 <= (and_ln52_fu_142_p2 or and_ln48_fu_118_p2);
    or_ln56_fu_272_p2 <= (or_ln52_1_fu_246_p2 or and_ln56_fu_154_p2);
    or_ln63_fu_298_p2 <= (or_ln56_fu_272_p2 or and_ln63_fu_166_p2);
    or_ln70_fu_304_p2 <= (or_ln63_fu_298_p2 or and_ln70_fu_178_p2);
    or_ln77_1_fu_208_p2 <= (or_ln77_fu_202_p2 or and_ln56_fu_154_p2);
    or_ln77_2_fu_330_p2 <= (and_ln77_fu_184_p2 or and_ln70_fu_178_p2);
    or_ln77_3_fu_342_p2 <= (xor_ln77_fu_336_p2 or and_ln63_fu_166_p2);
    or_ln77_4_fu_360_p2 <= (and_ln77_4_fu_354_p2 or and_ln52_fu_142_p2);
    or_ln77_5_fu_378_p2 <= (and_ln77_5_fu_372_p2 or and_ln44_fu_86_p2);
    or_ln77_6_fu_446_p2 <= (or_ln77_2_fu_330_p2 or and_ln63_fu_166_p2);
    or_ln77_7_fu_458_p2 <= (xor_ln77_2_fu_452_p2 or and_ln56_fu_154_p2);
    or_ln77_8_fu_482_p2 <= (or_ln48_fu_240_p2 or and_ln77_6_fu_476_p2);
    or_ln77_fu_202_p2 <= (and_ln77_1_fu_196_p2 or and_ln63_fu_166_p2);
    or_ln94_fu_693_p2 <= (and_ln94_fu_617_p2 or and_ln90_fu_602_p2);
    or_ln98_fu_719_p2 <= (and_ln98_1_fu_705_p2 or and_ln94_1_fu_687_p2);
    select_ln106_fu_757_p3 <= 
        zext_ln90_fu_677_p1 when (and_ln106_fu_751_p2(0) = '1') else 
        select_ln98_1_fu_725_p3;
    select_ln120_1_fu_536_p3 <= 
        ap_const_lv32_0 when (icmp_ln120_fu_504_p2(0) = '1') else 
        select_ln77_1_fu_438_p3;
    select_ln120_2_fu_797_p3 <= 
        ap_const_lv32_0 when (icmp_ln120_reg_847(0) = '1') else 
        select_ln77_2_fu_586_p3;
    select_ln120_3_fu_550_p3 <= 
        ap_const_lv32_0 when (icmp_ln120_fu_504_p2(0) = '1') else 
        add_ln88_fu_498_p2;
    select_ln120_fu_522_p3 <= 
        ap_const_lv32_0 when (icmp_ln120_fu_504_p2(0) = '1') else 
        select_ln77_fu_322_p3;
    select_ln44_fu_232_p3 <= 
        add_ln46_fu_100_p2 when (and_ln44_fu_86_p2(0) = '1') else 
        cptR;
    select_ln48_fu_402_p3 <= 
        add_ln50_fu_124_p2 when (and_ln48_1_fu_396_p2(0) = '1') else 
        cptG;
    select_ln56_1_fu_410_p3 <= 
        add_ln50_fu_124_p2 when (and_ln56_1_fu_258_p2(0) = '1') else 
        select_ln48_fu_402_p3;
    select_ln56_fu_264_p3 <= 
        add_ln46_fu_100_p2 when (and_ln56_1_fu_258_p2(0) = '1') else 
        select_ln44_fu_232_p3;
    select_ln63_fu_290_p3 <= 
        add_ln46_fu_100_p2 when (and_ln63_1_fu_284_p2(0) = '1') else 
        select_ln56_fu_264_p3;
    select_ln70_fu_430_p3 <= 
        add_ln50_fu_124_p2 when (and_ln70_1_fu_424_p2(0) = '1') else 
        select_ln56_1_fu_410_p3;
    select_ln77_1_fu_438_p3 <= 
        add_ln50_fu_124_p2 when (and_ln77_3_fu_316_p2(0) = '1') else 
        select_ln70_fu_430_p3;
    select_ln77_2_fu_586_p3 <= 
        cptB when (or_ln77_8_reg_842(0) = '1') else 
        add_ln70_fu_580_p2;
    select_ln77_fu_322_p3 <= 
        add_ln46_fu_100_p2 when (and_ln77_3_fu_316_p2(0) = '1') else 
        select_ln63_fu_290_p3;
    select_ln98_1_fu_725_p3 <= 
        select_ln98_fu_711_p3 when (or_ln98_fu_719_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln98_fu_711_p3 <= 
        ap_const_lv2_0 when (and_ln98_1_fu_705_p2(0) = '1') else 
        ap_const_lv2_1;
    valB_fu_64_p4 <= pixIn_val(95 downto 64);
    valG_fu_54_p4 <= pixIn_val(63 downto 32);
    valR_fu_50_p1 <= pixIn_val(32 - 1 downto 0);
    xor_ln102_fu_745_p2 <= (or_ln102_1_fu_739_p2 xor ap_const_lv1_1);
    xor_ln106_1_fu_769_p2 <= (icmp_ln106_fu_649_p2 xor ap_const_lv1_1);
    xor_ln106_fu_654_p2 <= (icmp_ln90_fu_593_p2 xor ap_const_lv1_1);
    xor_ln44_fu_390_p2 <= (ap_const_lv1_1 xor and_ln44_fu_86_p2);
    xor_ln48_fu_366_p2 <= (ap_const_lv1_1 xor and_ln48_fu_118_p2);
    xor_ln52_1_fu_252_p2 <= (or_ln52_1_fu_246_p2 xor ap_const_lv1_1);
    xor_ln52_2_fu_470_p2 <= (ap_const_lv1_1 xor and_ln52_1_fu_464_p2);
    xor_ln52_fu_220_p2 <= (or_ln52_fu_214_p2 xor ap_const_lv1_1);
    xor_ln56_1_fu_348_p2 <= (ap_const_lv1_1 xor and_ln56_fu_154_p2);
    xor_ln56_fu_278_p2 <= (or_ln56_fu_272_p2 xor ap_const_lv1_1);
    xor_ln63_fu_418_p2 <= (or_ln63_fu_298_p2 xor ap_const_lv1_1);
    xor_ln70_1_fu_310_p2 <= (or_ln70_fu_304_p2 xor ap_const_lv1_1);
    xor_ln70_fu_190_p2 <= (ap_const_lv1_1 xor and_ln70_fu_178_p2);
    xor_ln77_1_fu_384_p2 <= (or_ln77_5_fu_378_p2 xor ap_const_lv1_1);
    xor_ln77_2_fu_452_p2 <= (or_ln77_6_fu_446_p2 xor ap_const_lv1_1);
    xor_ln77_3_fu_488_p2 <= (or_ln77_8_fu_482_p2 xor ap_const_lv1_1);
    xor_ln77_fu_336_p2 <= (or_ln77_2_fu_330_p2 xor ap_const_lv1_1);
    xor_ln90_fu_681_p2 <= (ap_const_lv1_1 xor and_ln90_fu_602_p2);
    xor_ln94_fu_699_p2 <= (or_ln94_fu_693_p2 xor ap_const_lv1_1);
    zext_ln106_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln106_fu_757_p3),8));
    zext_ln120_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln106_2_fu_787_p2),8));
    zext_ln90_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln110_fu_671_p2),2));
end behav;
