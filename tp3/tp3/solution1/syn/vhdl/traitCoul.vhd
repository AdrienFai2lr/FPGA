-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity traitCoul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pixIn : IN STD_LOGIC_VECTOR (95 downto 0);
    pixOut : OUT STD_LOGIC_VECTOR (95 downto 0);
    pixOut_ap_vld : OUT STD_LOGIC;
    resultats : OUT STD_LOGIC_VECTOR (7 downto 0);
    resultats_ap_vld : OUT STD_LOGIC;
    valid : OUT STD_LOGIC_VECTOR (7 downto 0);
    valid_ap_vld : OUT STD_LOGIC );
end;


architecture behav of traitCoul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "traitCoul_traitCoul,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.722000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=295,HLS_SYN_LUT=1804,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal valR_fu_95_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valR_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal valG_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal valB_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_detectCoul_fu_81_ap_start : STD_LOGIC;
    signal grp_detectCoul_fu_81_ap_done : STD_LOGIC;
    signal grp_detectCoul_fu_81_ap_idle : STD_LOGIC;
    signal grp_detectCoul_fu_81_ap_ready : STD_LOGIC;
    signal grp_detectCoul_fu_81_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_detectCoul_fu_81_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln15_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_1_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_1_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal resB_fu_175_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal resG_fu_154_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal resR_fu_133_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component traitCoul_detectCoul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pixIn_val : IN STD_LOGIC_VECTOR (95 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_detectCoul_fu_81 : component traitCoul_detectCoul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_detectCoul_fu_81_ap_start,
        ap_done => grp_detectCoul_fu_81_ap_done,
        ap_idle => grp_detectCoul_fu_81_ap_idle,
        ap_ready => grp_detectCoul_fu_81_ap_ready,
        pixIn_val => pixIn,
        ap_return_0 => grp_detectCoul_fu_81_ap_return_0,
        ap_return_1 => grp_detectCoul_fu_81_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                valB_reg_221 <= pixIn(95 downto 64);
                valG_reg_212 <= pixIn(63 downto 32);
                valR_reg_203 <= valR_fu_95_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_detectCoul_fu_81_ap_start_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_detectCoul_fu_81_ap_start <= ap_const_logic_1;
        else 
            grp_detectCoul_fu_81_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln15_1_fu_123_p2 <= "1" when (signed(valR_reg_203) < signed(valB_reg_221)) else "0";
    icmp_ln15_fu_119_p2 <= "1" when (signed(valR_reg_203) < signed(valG_reg_212)) else "0";
    icmp_ln16_1_fu_144_p2 <= "1" when (signed(valG_reg_212) < signed(valB_reg_221)) else "0";
    icmp_ln16_fu_140_p2 <= "1" when (signed(valG_reg_212) < signed(valR_reg_203)) else "0";
    icmp_ln17_1_fu_165_p2 <= "1" when (signed(valB_reg_221) < signed(valG_reg_212)) else "0";
    icmp_ln17_fu_161_p2 <= "1" when (signed(valB_reg_221) < signed(valR_reg_203)) else "0";
    or_ln15_fu_127_p2 <= (icmp_ln15_fu_119_p2 or icmp_ln15_1_fu_123_p2);
    or_ln16_fu_148_p2 <= (icmp_ln16_fu_140_p2 or icmp_ln16_1_fu_144_p2);
    or_ln17_fu_169_p2 <= (icmp_ln17_fu_161_p2 or icmp_ln17_1_fu_165_p2);
    pixOut <= ((resB_fu_175_p3 & resG_fu_154_p3) & resR_fu_133_p3);

    pixOut_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pixOut_ap_vld <= ap_const_logic_1;
        else 
            pixOut_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    resB_fu_175_p3 <= 
        ap_const_lv32_0 when (or_ln17_fu_169_p2(0) = '1') else 
        valB_reg_221;
    resG_fu_154_p3 <= 
        ap_const_lv32_0 when (or_ln16_fu_148_p2(0) = '1') else 
        valG_reg_212;
    resR_fu_133_p3 <= 
        ap_const_lv32_0 when (or_ln15_fu_127_p2(0) = '1') else 
        valR_reg_203;
    resultats <= grp_detectCoul_fu_81_ap_return_0;

    resultats_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            resultats_ap_vld <= ap_const_logic_1;
        else 
            resultats_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    valR_fu_95_p1 <= pixIn(32 - 1 downto 0);
    valid <= grp_detectCoul_fu_81_ap_return_1;

    valid_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            valid_ap_vld <= ap_const_logic_1;
        else 
            valid_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
