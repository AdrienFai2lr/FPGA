// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="detectCoul_detectCoul,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.722000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=198,HLS_SYN_LUT=1478,HLS_VERSION=2023_2}" *)

module detectCoul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        resultats,
        resultats_ap_vld,
        valid,
        valid_ap_vld,
        pixIn
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] resultats;
output   resultats_ap_vld;
output  [7:0] valid;
output   valid_ap_vld;
input  [95:0] pixIn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg resultats_ap_vld;
reg valid_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] cptR;
reg   [31:0] cptG;
reg   [31:0] cptB;
reg   [31:0] cptPix;
wire   [0:0] and_ln44_fu_112_p2;
reg   [0:0] and_ln44_reg_833;
wire   [0:0] and_ln77_2_fu_252_p2;
reg   [0:0] and_ln77_2_reg_838;
wire   [31:0] select_ln77_fu_348_p3;
reg   [31:0] select_ln77_reg_843;
wire   [0:0] xor_ln77_1_fu_410_p2;
reg   [0:0] xor_ln77_1_reg_854;
wire   [31:0] select_ln77_1_fu_464_p3;
reg   [31:0] select_ln77_1_reg_859;
wire   [0:0] or_ln77_8_fu_508_p2;
reg   [0:0] or_ln77_8_reg_870;
wire   [31:0] select_ln120_fu_768_p3;
wire    ap_CS_fsm_state2;
wire   [0:0] or_ln120_fu_763_p2;
wire   [31:0] select_ln120_1_fu_780_p3;
wire   [0:0] or_ln120_1_fu_775_p2;
wire   [31:0] select_ln120_2_fu_793_p3;
wire   [0:0] or_ln120_2_fu_787_p2;
wire   [31:0] select_ln120_3_fu_801_p3;
wire   [31:0] pixIn_r_fu_76_p1;
wire   [31:0] pixIn_g_fu_80_p4;
wire   [31:0] pixIn_b_fu_90_p4;
wire   [0:0] icmp_ln44_fu_100_p2;
wire   [0:0] icmp_ln44_1_fu_106_p2;
wire   [0:0] icmp_ln48_fu_132_p2;
wire   [0:0] icmp_ln48_1_fu_138_p2;
wire   [0:0] icmp_ln52_fu_156_p2;
wire   [0:0] icmp_ln52_1_fu_162_p2;
wire   [0:0] icmp_ln56_fu_174_p2;
wire   [0:0] icmp_ln63_fu_186_p2;
wire   [0:0] icmp_ln70_fu_198_p2;
wire   [0:0] and_ln70_fu_204_p2;
wire   [0:0] and_ln77_fu_210_p2;
wire   [0:0] xor_ln70_fu_216_p2;
wire   [0:0] and_ln63_fu_192_p2;
wire   [0:0] and_ln77_1_fu_222_p2;
wire   [0:0] or_ln77_fu_228_p2;
wire   [0:0] and_ln56_fu_180_p2;
wire   [0:0] and_ln48_fu_144_p2;
wire   [0:0] and_ln52_fu_168_p2;
wire   [0:0] or_ln52_fu_240_p2;
wire   [0:0] or_ln77_1_fu_234_p2;
wire   [0:0] xor_ln52_fu_246_p2;
wire   [31:0] add_ln46_fu_126_p2;
wire   [0:0] or_ln48_fu_266_p2;
wire   [0:0] or_ln52_1_fu_272_p2;
wire   [0:0] xor_ln52_1_fu_278_p2;
wire   [0:0] and_ln56_1_fu_284_p2;
wire   [31:0] select_ln44_fu_258_p3;
wire   [0:0] or_ln56_fu_298_p2;
wire   [0:0] xor_ln56_fu_304_p2;
wire   [0:0] and_ln63_1_fu_310_p2;
wire   [31:0] select_ln56_fu_290_p3;
wire   [0:0] or_ln63_fu_324_p2;
wire   [0:0] or_ln70_fu_330_p2;
wire   [0:0] xor_ln70_1_fu_336_p2;
wire   [0:0] and_ln77_3_fu_342_p2;
wire   [31:0] select_ln63_fu_316_p3;
wire   [0:0] or_ln77_2_fu_356_p2;
wire   [0:0] xor_ln77_fu_362_p2;
wire   [0:0] or_ln77_3_fu_368_p2;
wire   [0:0] xor_ln56_1_fu_374_p2;
wire   [0:0] and_ln77_4_fu_380_p2;
wire   [0:0] or_ln77_4_fu_386_p2;
wire   [0:0] xor_ln48_fu_392_p2;
wire   [0:0] and_ln77_5_fu_398_p2;
wire   [0:0] or_ln77_5_fu_404_p2;
wire   [0:0] xor_ln44_fu_416_p2;
wire   [0:0] and_ln48_1_fu_422_p2;
wire   [31:0] add_ln50_fu_150_p2;
wire   [31:0] select_ln48_fu_428_p3;
wire   [0:0] xor_ln63_fu_444_p2;
wire   [0:0] and_ln70_1_fu_450_p2;
wire   [31:0] select_ln56_1_fu_436_p3;
wire   [31:0] select_ln70_fu_456_p3;
wire   [0:0] or_ln77_6_fu_472_p2;
wire   [0:0] xor_ln77_2_fu_478_p2;
wire   [0:0] and_ln52_1_fu_490_p2;
wire   [0:0] or_ln77_7_fu_484_p2;
wire   [0:0] xor_ln52_2_fu_496_p2;
wire   [0:0] and_ln77_6_fu_502_p2;
wire   [31:0] add_ln70_fu_523_p2;
wire   [31:0] select_ln77_2_fu_529_p3;
wire   [0:0] icmp_ln90_fu_546_p2;
wire   [0:0] icmp_ln90_1_fu_550_p2;
wire   [0:0] icmp_ln94_fu_561_p2;
wire   [0:0] icmp_ln94_1_fu_565_p2;
wire   [0:0] icmp_ln98_fu_576_p2;
wire   [0:0] icmp_ln98_1_fu_581_p2;
wire   [0:0] icmp_ln102_fu_592_p2;
wire   [0:0] icmp_ln106_fu_602_p2;
wire   [0:0] xor_ln106_fu_607_p2;
wire   [0:0] icmp_ln110_fu_619_p2;
wire   [0:0] and_ln110_fu_624_p2;
wire   [0:0] and_ln90_fu_555_p2;
wire   [0:0] and_ln94_fu_570_p2;
wire   [0:0] xor_ln90_fu_634_p2;
wire   [0:0] or_ln94_fu_646_p2;
wire   [0:0] and_ln98_fu_586_p2;
wire   [0:0] xor_ln94_fu_652_p2;
wire   [0:0] and_ln98_1_fu_658_p2;
wire   [0:0] and_ln94_1_fu_640_p2;
wire   [0:0] or_ln98_fu_672_p2;
wire   [1:0] select_ln98_fu_664_p3;
wire   [0:0] and_ln102_fu_596_p2;
wire   [0:0] or_ln102_fu_686_p2;
wire   [0:0] or_ln102_1_fu_692_p2;
wire   [0:0] or_ln106_fu_613_p2;
wire   [0:0] xor_ln102_fu_698_p2;
wire   [0:0] and_ln106_fu_704_p2;
wire   [1:0] zext_ln90_fu_630_p1;
wire   [1:0] select_ln98_1_fu_678_p3;
wire   [1:0] select_ln106_fu_710_p3;
wire   [0:0] xor_ln106_1_fu_723_p2;
wire   [0:0] and_ln106_1_fu_729_p2;
wire   [0:0] or_ln106_1_fu_735_p2;
wire   [0:0] or_ln106_2_fu_741_p2;
wire   [31:0] add_ln88_fu_540_p2;
wire   [0:0] icmp_ln120_fu_752_p2;
wire   [0:0] or_ln120_3_fu_758_p2;
wire   [0:0] xor_ln77_3_fu_518_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 cptR = 32'd0;
#0 cptG = 32'd0;
#0 cptB = 32'd0;
#0 cptPix = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        and_ln44_reg_833 <= and_ln44_fu_112_p2;
        and_ln77_2_reg_838 <= and_ln77_2_fu_252_p2;
        or_ln77_8_reg_870 <= or_ln77_8_fu_508_p2;
        select_ln77_1_reg_859 <= select_ln77_1_fu_464_p3;
        select_ln77_reg_843 <= select_ln77_fu_348_p3;
        xor_ln77_1_reg_854 <= xor_ln77_1_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln120_2_fu_787_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        cptB <= select_ln120_2_fu_793_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln120_1_fu_775_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        cptG <= select_ln120_1_fu_780_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cptPix <= select_ln120_3_fu_801_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln120_fu_763_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        cptR <= select_ln120_fu_768_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        resultats_ap_vld = 1'b1;
    end else begin
        resultats_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valid_ap_vld = 1'b1;
    end else begin
        valid_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_126_p2 = (cptR + 32'd1);

assign add_ln50_fu_150_p2 = (cptG + 32'd1);

assign add_ln70_fu_523_p2 = (cptB + 32'd1);

assign add_ln88_fu_540_p2 = (cptPix + 32'd1);

assign and_ln102_fu_596_p2 = (icmp_ln90_1_fu_550_p2 & icmp_ln102_fu_592_p2);

assign and_ln106_1_fu_729_p2 = (xor_ln106_1_fu_723_p2 & icmp_ln90_fu_546_p2);

assign and_ln106_fu_704_p2 = (xor_ln102_fu_698_p2 & or_ln106_fu_613_p2);

assign and_ln110_fu_624_p2 = (icmp_ln94_fu_561_p2 & icmp_ln110_fu_619_p2);

assign and_ln44_fu_112_p2 = (icmp_ln44_fu_100_p2 & icmp_ln44_1_fu_106_p2);

assign and_ln48_1_fu_422_p2 = (xor_ln44_fu_416_p2 & and_ln48_fu_144_p2);

assign and_ln48_fu_144_p2 = (icmp_ln48_fu_132_p2 & icmp_ln48_1_fu_138_p2);

assign and_ln52_1_fu_490_p2 = (icmp_ln52_fu_156_p2 & icmp_ln52_1_fu_162_p2);

assign and_ln52_fu_168_p2 = (icmp_ln52_fu_156_p2 & icmp_ln52_1_fu_162_p2);

assign and_ln56_1_fu_284_p2 = (xor_ln52_1_fu_278_p2 & and_ln56_fu_180_p2);

assign and_ln56_fu_180_p2 = (icmp_ln56_fu_174_p2 & icmp_ln44_1_fu_106_p2);

assign and_ln63_1_fu_310_p2 = (xor_ln56_fu_304_p2 & and_ln63_fu_192_p2);

assign and_ln63_fu_192_p2 = (icmp_ln63_fu_186_p2 & icmp_ln44_fu_100_p2);

assign and_ln70_1_fu_450_p2 = (xor_ln63_fu_444_p2 & and_ln70_fu_204_p2);

assign and_ln70_fu_204_p2 = (icmp_ln70_fu_198_p2 & icmp_ln48_fu_132_p2);

assign and_ln77_1_fu_222_p2 = (xor_ln70_fu_216_p2 & and_ln77_fu_210_p2);

assign and_ln77_2_fu_252_p2 = (xor_ln52_fu_246_p2 & or_ln77_1_fu_234_p2);

assign and_ln77_3_fu_342_p2 = (xor_ln70_1_fu_336_p2 & and_ln77_fu_210_p2);

assign and_ln77_4_fu_380_p2 = (xor_ln56_1_fu_374_p2 & or_ln77_3_fu_368_p2);

assign and_ln77_5_fu_398_p2 = (xor_ln48_fu_392_p2 & or_ln77_4_fu_386_p2);

assign and_ln77_6_fu_502_p2 = (xor_ln52_2_fu_496_p2 & or_ln77_7_fu_484_p2);

assign and_ln77_fu_210_p2 = (icmp_ln63_fu_186_p2 & icmp_ln56_fu_174_p2);

assign and_ln90_fu_555_p2 = (icmp_ln90_fu_546_p2 & icmp_ln90_1_fu_550_p2);

assign and_ln94_1_fu_640_p2 = (xor_ln90_fu_634_p2 & and_ln94_fu_570_p2);

assign and_ln94_fu_570_p2 = (icmp_ln94_fu_561_p2 & icmp_ln94_1_fu_565_p2);

assign and_ln98_1_fu_658_p2 = (xor_ln94_fu_652_p2 & and_ln98_fu_586_p2);

assign and_ln98_fu_586_p2 = (icmp_ln98_fu_576_p2 & icmp_ln98_1_fu_581_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign icmp_ln102_fu_592_p2 = ((select_ln77_reg_843 == select_ln77_1_reg_859) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_602_p2 = ((select_ln77_reg_843 != select_ln77_2_fu_529_p3) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_619_p2 = ((select_ln77_1_reg_859 == select_ln77_2_fu_529_p3) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_752_p2 = ((add_ln88_fu_540_p2 == 32'd107200) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_106_p2 = (($signed(pixIn_r_fu_76_p1) > $signed(pixIn_b_fu_90_p4)) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_100_p2 = (($signed(pixIn_r_fu_76_p1) > $signed(pixIn_g_fu_80_p4)) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_138_p2 = (($signed(pixIn_g_fu_80_p4) > $signed(pixIn_b_fu_90_p4)) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_132_p2 = (($signed(pixIn_g_fu_80_p4) > $signed(pixIn_r_fu_76_p1)) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_162_p2 = (($signed(pixIn_b_fu_90_p4) > $signed(pixIn_g_fu_80_p4)) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_156_p2 = (($signed(pixIn_b_fu_90_p4) > $signed(pixIn_r_fu_76_p1)) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_174_p2 = ((pixIn_r_fu_76_p1 == pixIn_g_fu_80_p4) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_186_p2 = ((pixIn_r_fu_76_p1 == pixIn_b_fu_90_p4) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_198_p2 = ((pixIn_g_fu_80_p4 == pixIn_b_fu_90_p4) ? 1'b1 : 1'b0);

assign icmp_ln90_1_fu_550_p2 = (($signed(select_ln77_reg_843) > $signed(select_ln77_2_fu_529_p3)) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_546_p2 = (($signed(select_ln77_reg_843) > $signed(select_ln77_1_reg_859)) ? 1'b1 : 1'b0);

assign icmp_ln94_1_fu_565_p2 = (($signed(select_ln77_1_reg_859) > $signed(select_ln77_2_fu_529_p3)) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_561_p2 = (($signed(select_ln77_1_reg_859) > $signed(select_ln77_reg_843)) ? 1'b1 : 1'b0);

assign icmp_ln98_1_fu_581_p2 = (($signed(select_ln77_2_fu_529_p3) > $signed(select_ln77_1_reg_859)) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_576_p2 = (($signed(select_ln77_2_fu_529_p3) > $signed(select_ln77_reg_843)) ? 1'b1 : 1'b0);

assign or_ln102_1_fu_692_p2 = (or_ln94_fu_646_p2 | or_ln102_fu_686_p2);

assign or_ln102_fu_686_p2 = (and_ln98_fu_586_p2 | and_ln102_fu_596_p2);

assign or_ln106_1_fu_735_p2 = (or_ln102_1_fu_692_p2 | and_ln106_1_fu_729_p2);

assign or_ln106_2_fu_741_p2 = (or_ln106_1_fu_735_p2 | and_ln110_fu_624_p2);

assign or_ln106_fu_613_p2 = (xor_ln106_fu_607_p2 | icmp_ln106_fu_602_p2);

assign or_ln120_1_fu_775_p2 = (xor_ln77_1_reg_854 | icmp_ln120_fu_752_p2);

assign or_ln120_2_fu_787_p2 = (xor_ln77_3_fu_518_p2 | icmp_ln120_fu_752_p2);

assign or_ln120_3_fu_758_p2 = (icmp_ln120_fu_752_p2 | and_ln77_2_reg_838);

assign or_ln120_fu_763_p2 = (or_ln120_3_fu_758_p2 | and_ln44_reg_833);

assign or_ln48_fu_266_p2 = (and_ln48_fu_144_p2 | and_ln44_fu_112_p2);

assign or_ln52_1_fu_272_p2 = (or_ln48_fu_266_p2 | and_ln52_fu_168_p2);

assign or_ln52_fu_240_p2 = (and_ln52_fu_168_p2 | and_ln48_fu_144_p2);

assign or_ln56_fu_298_p2 = (or_ln52_1_fu_272_p2 | and_ln56_fu_180_p2);

assign or_ln63_fu_324_p2 = (or_ln56_fu_298_p2 | and_ln63_fu_192_p2);

assign or_ln70_fu_330_p2 = (or_ln63_fu_324_p2 | and_ln70_fu_204_p2);

assign or_ln77_1_fu_234_p2 = (or_ln77_fu_228_p2 | and_ln56_fu_180_p2);

assign or_ln77_2_fu_356_p2 = (and_ln77_fu_210_p2 | and_ln70_fu_204_p2);

assign or_ln77_3_fu_368_p2 = (xor_ln77_fu_362_p2 | and_ln63_fu_192_p2);

assign or_ln77_4_fu_386_p2 = (and_ln77_4_fu_380_p2 | and_ln52_fu_168_p2);

assign or_ln77_5_fu_404_p2 = (and_ln77_5_fu_398_p2 | and_ln44_fu_112_p2);

assign or_ln77_6_fu_472_p2 = (or_ln77_2_fu_356_p2 | and_ln63_fu_192_p2);

assign or_ln77_7_fu_484_p2 = (xor_ln77_2_fu_478_p2 | and_ln56_fu_180_p2);

assign or_ln77_8_fu_508_p2 = (or_ln48_fu_266_p2 | and_ln77_6_fu_502_p2);

assign or_ln77_fu_228_p2 = (and_ln77_1_fu_222_p2 | and_ln63_fu_192_p2);

assign or_ln94_fu_646_p2 = (and_ln94_fu_570_p2 | and_ln90_fu_555_p2);

assign or_ln98_fu_672_p2 = (and_ln98_1_fu_658_p2 | and_ln94_1_fu_640_p2);

assign pixIn_b_fu_90_p4 = {{pixIn[95:64]}};

assign pixIn_g_fu_80_p4 = {{pixIn[63:32]}};

assign pixIn_r_fu_76_p1 = pixIn[31:0];

assign resultats = select_ln106_fu_710_p3;

assign select_ln106_fu_710_p3 = ((and_ln106_fu_704_p2[0:0] == 1'b1) ? zext_ln90_fu_630_p1 : select_ln98_1_fu_678_p3);

assign select_ln120_1_fu_780_p3 = ((icmp_ln120_fu_752_p2[0:0] == 1'b1) ? 32'd0 : select_ln77_1_reg_859);

assign select_ln120_2_fu_793_p3 = ((icmp_ln120_fu_752_p2[0:0] == 1'b1) ? 32'd0 : select_ln77_2_fu_529_p3);

assign select_ln120_3_fu_801_p3 = ((icmp_ln120_fu_752_p2[0:0] == 1'b1) ? 32'd0 : add_ln88_fu_540_p2);

assign select_ln120_fu_768_p3 = ((icmp_ln120_fu_752_p2[0:0] == 1'b1) ? 32'd0 : select_ln77_reg_843);

assign select_ln44_fu_258_p3 = ((and_ln44_fu_112_p2[0:0] == 1'b1) ? add_ln46_fu_126_p2 : cptR);

assign select_ln48_fu_428_p3 = ((and_ln48_1_fu_422_p2[0:0] == 1'b1) ? add_ln50_fu_150_p2 : cptG);

assign select_ln56_1_fu_436_p3 = ((and_ln56_1_fu_284_p2[0:0] == 1'b1) ? add_ln50_fu_150_p2 : select_ln48_fu_428_p3);

assign select_ln56_fu_290_p3 = ((and_ln56_1_fu_284_p2[0:0] == 1'b1) ? add_ln46_fu_126_p2 : select_ln44_fu_258_p3);

assign select_ln63_fu_316_p3 = ((and_ln63_1_fu_310_p2[0:0] == 1'b1) ? add_ln46_fu_126_p2 : select_ln56_fu_290_p3);

assign select_ln70_fu_456_p3 = ((and_ln70_1_fu_450_p2[0:0] == 1'b1) ? add_ln50_fu_150_p2 : select_ln56_1_fu_436_p3);

assign select_ln77_1_fu_464_p3 = ((and_ln77_3_fu_342_p2[0:0] == 1'b1) ? add_ln50_fu_150_p2 : select_ln70_fu_456_p3);

assign select_ln77_2_fu_529_p3 = ((or_ln77_8_reg_870[0:0] == 1'b1) ? cptB : add_ln70_fu_523_p2);

assign select_ln77_fu_348_p3 = ((and_ln77_3_fu_342_p2[0:0] == 1'b1) ? add_ln46_fu_126_p2 : select_ln63_fu_316_p3);

assign select_ln98_1_fu_678_p3 = ((or_ln98_fu_672_p2[0:0] == 1'b1) ? select_ln98_fu_664_p3 : 2'd2);

assign select_ln98_fu_664_p3 = ((and_ln98_1_fu_658_p2[0:0] == 1'b1) ? 2'd0 : 2'd1);

assign valid = or_ln106_2_fu_741_p2;

assign xor_ln102_fu_698_p2 = (or_ln102_1_fu_692_p2 ^ 1'd1);

assign xor_ln106_1_fu_723_p2 = (icmp_ln106_fu_602_p2 ^ 1'd1);

assign xor_ln106_fu_607_p2 = (icmp_ln90_fu_546_p2 ^ 1'd1);

assign xor_ln44_fu_416_p2 = (1'd1 ^ and_ln44_fu_112_p2);

assign xor_ln48_fu_392_p2 = (1'd1 ^ and_ln48_fu_144_p2);

assign xor_ln52_1_fu_278_p2 = (or_ln52_1_fu_272_p2 ^ 1'd1);

assign xor_ln52_2_fu_496_p2 = (1'd1 ^ and_ln52_1_fu_490_p2);

assign xor_ln52_fu_246_p2 = (or_ln52_fu_240_p2 ^ 1'd1);

assign xor_ln56_1_fu_374_p2 = (1'd1 ^ and_ln56_fu_180_p2);

assign xor_ln56_fu_304_p2 = (or_ln56_fu_298_p2 ^ 1'd1);

assign xor_ln63_fu_444_p2 = (or_ln63_fu_324_p2 ^ 1'd1);

assign xor_ln70_1_fu_336_p2 = (or_ln70_fu_330_p2 ^ 1'd1);

assign xor_ln70_fu_216_p2 = (1'd1 ^ and_ln70_fu_204_p2);

assign xor_ln77_1_fu_410_p2 = (or_ln77_5_fu_404_p2 ^ 1'd1);

assign xor_ln77_2_fu_478_p2 = (or_ln77_6_fu_472_p2 ^ 1'd1);

assign xor_ln77_3_fu_518_p2 = (or_ln77_8_reg_870 ^ 1'd1);

assign xor_ln77_fu_362_p2 = (or_ln77_2_fu_356_p2 ^ 1'd1);

assign xor_ln90_fu_634_p2 = (1'd1 ^ and_ln90_fu_555_p2);

assign xor_ln94_fu_652_p2 = (or_ln94_fu_646_p2 ^ 1'd1);

assign zext_ln90_fu_630_p1 = and_ln110_fu_624_p2;

endmodule //detectCoul
