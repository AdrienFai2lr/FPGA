// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="exo1_exo1,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=30.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=20.270000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=170,HLS_VERSION=2023_2}" *)

module exo1 (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        res,
        res_ap_vld,
        c1,
        c2,
        in1,
        in2
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] res;
output   res_ap_vld;
input  [31:0] c1;
input  [31:0] c2;
input  [31:0] in1;
input  [31:0] in2;

reg res_ap_vld;

wire  signed [31:0] temp2_fu_72_p2;
wire  signed [31:0] temp1_fu_65_p2;
wire   [31:0] temp3_fu_61_p2;
wire   [0:0] icmp_ln18_fu_79_p2;
wire   [31:0] temp4_fu_85_p2;
wire    ap_ce_reg;

exo1_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(temp2_fu_72_p2),
    .din1(temp1_fu_65_p2),
    .dout(temp3_fu_61_p2)
);

exo1_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(in1),
    .din1(c1),
    .dout(temp1_fu_65_p2)
);

exo1_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(in2),
    .din1(c2),
    .dout(temp2_fu_72_p2)
);

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        res_ap_vld = 1'b1;
    end else begin
        res_ap_vld = 1'b0;
    end
end

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign icmp_ln18_fu_79_p2 = (($signed(temp1_fu_65_p2) > $signed(temp2_fu_72_p2)) ? 1'b1 : 1'b0);

assign res = ((icmp_ln18_fu_79_p2[0:0] == 1'b1) ? temp3_fu_61_p2 : temp4_fu_85_p2);

assign temp4_fu_85_p2 = (32'd0 - temp3_fu_61_p2);

endmodule //exo1
