-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exo1 is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    res : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_ap_vld : OUT STD_LOGIC;
    c1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in2 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of exo1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "exo1_exo1,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=30.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=20.270000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=170,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

    signal temp2_fu_72_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_fu_65_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_fu_61_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_fu_79_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp4_fu_85_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component exo1_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_1_1_U1 : component exo1_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => temp2_fu_72_p2,
        din1 => temp1_fu_65_p2,
        dout => temp3_fu_61_p2);

    mul_32s_32s_32_1_1_U2 : component exo1_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => in1,
        din1 => c1,
        dout => temp1_fu_65_p2);

    mul_32s_32s_32_1_1_U3 : component exo1_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => in2,
        din1 => c2,
        dout => temp2_fu_72_p2);




    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    icmp_ln18_fu_79_p2 <= "1" when (signed(temp1_fu_65_p2) > signed(temp2_fu_72_p2)) else "0";
    res <= 
        temp3_fu_61_p2 when (icmp_ln18_fu_79_p2(0) = '1') else 
        temp4_fu_85_p2;

    res_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            res_ap_vld <= ap_const_logic_1;
        else 
            res_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp4_fu_85_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(temp3_fu_61_p2));
end behav;
